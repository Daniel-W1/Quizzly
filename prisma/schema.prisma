// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  onboarded     Boolean   @default(false)
  resetToken    String? @unique
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  emailVerificationToken String? @unique
  emailVerificationTokenExpiry DateTime? @map("email_verification_token_expiry")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  accounts      Account[]
  profile       Profile?
  testSessions  TestSession[]

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  name        String
  username    String   @unique
  university  String
  department  String
  year        String
  bio         String?
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  testSessions  TestSession[]

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique

  @@map("profiles")
}

model Test {
  id                String    @id @default(cuid())
  title             String
  description       String?
  university        String
  department        String
  teacherName       String   @map("teacher_name")
  courseName        String   @map("course_name")
  chapterNames      String   @map("chapter_names")
  keyConcepts       KeyConcept[] @relation("KeyConceptTests")
  examType          ExamType
  totalMarks         Int      @map("total_marks")
  year              Int      @map("year")
  difficultyLevel   DifficultyLevel
  questions         Question[]
  version           String   @map("version")
  allowedTime       Int      @map("allowed_time") // in minutes
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  qualityRating     QualityRating[]
  testSessions      TestSession[]

  @@index([title, courseName, university, department, examType, difficultyLevel, allowedTime, year])

  @@map("tests")
}

model Question {
  id                String   @id @default(cuid())
  testId            String   @map("test_id")
  type              String
  statement         String
  choices           Json
  correctAnswer     String   @map("correct_answer")
  explanation       String?
  points            Int
  mediaUrl          String?  @map("media_url")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  keyConcepts       KeyConcept[] @relation("KeyConceptQuestions")

  test              Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model QualityRating {
  id                String   @id @default(cuid())
  testId            String   @map("test_id")
  rating            Int
  comment           String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  test              Test     @relation(fields: [testId], references: [id], onDelete: Cascade) 

  @@map("quality_ratings")
}

model KeyConcept {
  id                String   @id @default(cuid())
  name              String
  description       String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  questions         Question[] @relation("KeyConceptQuestions")
  tests             Test[] @relation("KeyConceptTests")

  @@index([name])
  @@map("key_concepts")
}

model TestSession {
  id                String   @id @default(cuid())
  testId            String   @map("test_id")
  userId            String   @map("user_id")
  profileId         String   @map("profile_id")
  remainingTime     Int      @map("remaining_time")
  questionsPerPage  Int      @map("questions_per_page")
  selectedAnswers   Json     @map("selected_answers")
  mood              String   @map("mood")
  completedQuestions Int      @map("completed_questions")
  score             Int
  finished          Boolean  @default(false)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  test              Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile           Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("test_sessions")
}

enum ExamType {
  MIDTERM
  FINAL
  TEST
  QUIZ
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}